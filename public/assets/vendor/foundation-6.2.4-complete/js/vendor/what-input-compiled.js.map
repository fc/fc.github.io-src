{"version":3,"sources":["what-input.js"],"names":[],"mappings":";;AAAA,OAAO,SAAP,GAAoB,YAAW;;AAE7B;;AAEA;;;;;;AAMA;;AACA,MAAI,aAAa,EAAjB;;AAEA;AACA,MAAI,IAAJ;;AAEA;AACA,MAAI,SAAS,KAAb;;AAEA;AACA,MAAI,eAAe,IAAnB;;AAEA;AACA,MAAI,kBAAkB,CACpB,QADoB,EAEpB,UAFoB,EAGpB,MAHoB,EAIpB,OAJoB,EAKpB,OALoB,EAMpB,OANoB,EAOpB,QAPoB,CAAtB;;AAUA;AACA;AACA,MAAI,aAAa,aAAjB;;AAEA;AACA;AACA,MAAI,YAAY,CACd,EADc,EACV;AACJ,IAFc,EAEV;AACJ,IAHc,EAGV;AACJ,IAJc,EAIV;AACJ,IALc,CAKV;AALU,GAAhB;;AAQA;AACA,MAAI,WAAW;AACb,eAAW,UADE;AAEb,aAAS,UAFI;AAGb,iBAAa,OAHA;AAIb,iBAAa,OAJA;AAKb,qBAAiB,SALJ;AAMb,qBAAiB,SANJ;AAOb,mBAAe,SAPF;AAQb,mBAAe,SARF;AASb,kBAAc;AATD,GAAf;;AAYA;AACA,WAAS,aAAT,IAA0B,OAA1B;;AAEA;AACA,MAAI,aAAa,EAAjB;;AAEA;AACA,MAAI,SAAS;AACX,OAAG,KADQ;AAEX,QAAI,OAFO;AAGX,QAAI,OAHO;AAIX,QAAI,KAJO;AAKX,QAAI,OALO;AAMX,QAAI,MANO;AAOX,QAAI,IAPO;AAQX,QAAI,OARO;AASX,QAAI;AATO,GAAb;;AAYA;AACA,MAAI,aAAa;AACf,OAAG,OADY;AAEf,OAAG,OAFY,EAEH;AACZ,OAAG;AAHY,GAAjB;;AAMA;AACA,MAAI,KAAJ;;AAGA;;;;;;AAMA;AACA,WAAS,WAAT,GAAuB;AACrB;AACA,aAAS,KAAT;;AAEA,aAAS,IAAT;AACA,YAAQ,OAAO,UAAP,CAAkB,YAAW;AACnC,eAAS,KAAT;AACD,KAFO,EAEL,GAFK,CAAR;AAGD;;AAED,WAAS,aAAT,CAAuB,KAAvB,EAA8B;AAC5B,QAAI,CAAC,MAAL,EAAa,SAAS,KAAT;AACd;;AAED,WAAS,eAAT,CAAyB,KAAzB,EAAgC;AAC9B;AACA,aAAS,KAAT;AACD;;AAED,WAAS,UAAT,GAAsB;AACpB,WAAO,YAAP,CAAoB,KAApB;AACD;;AAED,WAAS,QAAT,CAAkB,KAAlB,EAAyB;AACvB,QAAI,WAAW,IAAI,KAAJ,CAAf;AACA,QAAI,QAAQ,SAAS,MAAM,IAAf,CAAZ;AACA,QAAI,UAAU,SAAd,EAAyB,QAAQ,YAAY,KAAZ,CAAR;;AAEzB;AACA,QAAI,iBAAiB,KAArB,EAA4B;AAC1B,UAAI,cAAc,OAAO,KAAP,CAAlB;AACA,UAAI,kBAAkB,YAAY,QAAZ,CAAqB,WAArB,EAAtB;AACA,UAAI,kBAAmB,oBAAoB,OAArB,GAAgC,YAAY,YAAZ,CAAyB,MAAzB,CAAhC,GAAmE,IAAzF;;AAEA,UACE,CAAC;AACD,OAAC,KAAK,YAAL,CAAkB,2BAAlB,CAAD;;AAEA;AACA,kBAHA;;AAKA;AACA,gBAAU,UANV;;AAQA;AACA,aAAO,QAAP,MAAqB,KATrB;;AAWA;AAEG,0BAAoB,UAApB,IACA,oBAAoB,QADpB,IAEC,oBAAoB,OAApB,IAA+B,gBAAgB,OAAhB,CAAwB,eAAxB,IAA2C,CAf9E,CADA;AAkBE;AACA,gBAAU,OAAV,CAAkB,QAAlB,IAA8B,CAAC,CApBnC,EAsBE;AACA;AACD,OAxBD,MAwBO;AACL,oBAAY,KAAZ;AACD;AACF;;AAED,QAAI,UAAU,UAAd,EAA0B,QAAQ,QAAR;AAC3B;;AAED,WAAS,WAAT,CAAqB,MAArB,EAA6B;AAC3B,mBAAe,MAAf;AACA,SAAK,YAAL,CAAkB,gBAAlB,EAAoC,YAApC;;AAEA,QAAI,WAAW,OAAX,CAAmB,YAAnB,MAAqC,CAAC,CAA1C,EAA6C,WAAW,IAAX,CAAgB,YAAhB;AAC9C;;AAED,WAAS,GAAT,CAAa,KAAb,EAAoB;AAClB,WAAQ,MAAM,OAAP,GAAkB,MAAM,OAAxB,GAAkC,MAAM,KAA/C;AACD;;AAED,WAAS,MAAT,CAAgB,KAAhB,EAAuB;AACrB,WAAO,MAAM,MAAN,IAAgB,MAAM,UAA7B;AACD;;AAED,WAAS,WAAT,CAAqB,KAArB,EAA4B;AAC1B,QAAI,OAAO,MAAM,WAAb,KAA6B,QAAjC,EAA2C;AACzC,aAAO,WAAW,MAAM,WAAjB,CAAP;AACD,KAFD,MAEO;AACL,aAAQ,MAAM,WAAN,KAAsB,KAAvB,GAAgC,OAAhC,GAA0C,MAAM,WAAvD,CADK,CAC+D;AACrE;AACF;;AAED;AACA,WAAS,OAAT,CAAiB,QAAjB,EAA2B;AACzB,QAAI,WAAW,OAAX,CAAmB,OAAO,QAAP,CAAnB,MAAyC,CAAC,CAA1C,IAA+C,OAAO,QAAP,CAAnD,EAAqE,WAAW,IAAX,CAAgB,OAAO,QAAP,CAAhB;AACtE;;AAED,WAAS,SAAT,CAAmB,KAAnB,EAA0B;AACxB,QAAI,WAAW,IAAI,KAAJ,CAAf;AACA,QAAI,WAAW,WAAW,OAAX,CAAmB,OAAO,QAAP,CAAnB,CAAf;;AAEA,QAAI,aAAa,CAAC,CAAlB,EAAqB,WAAW,MAAX,CAAkB,QAAlB,EAA4B,CAA5B;AACtB;;AAED,WAAS,UAAT,GAAsB;AACpB,WAAO,SAAS,IAAhB;;AAEA;AACA,QAAI,OAAO,YAAX,EAAyB;AACvB,WAAK,gBAAL,CAAsB,aAAtB,EAAqC,aAArC;AACA,WAAK,gBAAL,CAAsB,aAAtB,EAAqC,aAArC;AACD,KAHD,MAGO,IAAI,OAAO,cAAX,EAA2B;AAChC,WAAK,gBAAL,CAAsB,eAAtB,EAAuC,aAAvC;AACA,WAAK,gBAAL,CAAsB,eAAtB,EAAuC,aAAvC;AACD,KAHM,MAGA;;AAEL;AACA,WAAK,gBAAL,CAAsB,WAAtB,EAAmC,aAAnC;AACA,WAAK,gBAAL,CAAsB,WAAtB,EAAmC,aAAnC;;AAEA;AACA,UAAI,kBAAkB,MAAtB,EAA8B;AAC5B,aAAK,gBAAL,CAAsB,YAAtB,EAAoC,WAApC;AACD;AACF;;AAED;AACA,SAAK,gBAAL,CAAsB,UAAtB,EAAkC,aAAlC;;AAEA;AACA,SAAK,gBAAL,CAAsB,SAAtB,EAAiC,eAAjC;AACA,SAAK,gBAAL,CAAsB,OAAtB,EAA+B,eAA/B;AACA,aAAS,gBAAT,CAA0B,OAA1B,EAAmC,SAAnC;AACD;;AAGD;;;;;;AAMA;AACA;AACA,WAAS,WAAT,GAAuB;AACrB,WAAO,aAAa,aAAa,SAAS,aAAT,CAAuB,KAAvB,CAAb,GAClB,OADkB,GACR;;AAEV,aAAS,YAAT,KAA0B,SAA1B,GACE,YADF,GACiB;AACf,oBALJ,CADqB,CAMC;AACvB;;AAGD;;;;;;;;AASA,MACE,sBAAsB,MAAtB,IACA,MAAM,SAAN,CAAgB,OAFlB,EAGE;;AAEA;AACA,QAAI,SAAS,IAAb,EAAmB;AACjB;;AAEF;AACC,KAJD,MAIO;AACL,eAAS,gBAAT,CAA0B,kBAA1B,EAA8C,UAA9C;AACD;AACF;;AAGD;;;;;;AAMA,SAAO;;AAEL;AACA,SAAK,eAAW;AAAE,aAAO,YAAP;AAAsB,KAHnC;;AAKL;AACA,UAAM,gBAAW;AAAE,aAAO,UAAP;AAAoB,KANlC;;AAQL;AACA,WAAO,iBAAW;AAAE,aAAO,UAAP;AAAoB,KATnC;;AAWL;AACA,SAAK;AAZA,GAAP;AAeD,CAtSmB,EAApB","file":"what-input-compiled.js","sourcesContent":["window.whatInput = (function() {\n\n  'use strict';\n\n  /*\n    ---------------\n    variables\n    ---------------\n  */\n\n  // array of actively pressed keys\n  var activeKeys = [];\n\n  // cache document.body\n  var body;\n\n  // boolean: true if touch buffer timer is running\n  var buffer = false;\n\n  // the last used input type\n  var currentInput = null;\n\n  // `input` types that don't accept text\n  var nonTypingInputs = [\n    'button',\n    'checkbox',\n    'file',\n    'image',\n    'radio',\n    'reset',\n    'submit'\n  ];\n\n  // detect version of mouse wheel event to use\n  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n  var mouseWheel = detectWheel();\n\n  // list of modifier keys commonly used with the mouse and\n  // can be safely ignored to prevent false keyboard detection\n  var ignoreMap = [\n    16, // shift\n    17, // control\n    18, // alt\n    91, // Windows key / left Apple cmd\n    93  // Windows menu / right Apple cmd\n  ];\n\n  // mapping of events to input types\n  var inputMap = {\n    'keydown': 'keyboard',\n    'keyup': 'keyboard',\n    'mousedown': 'mouse',\n    'mousemove': 'mouse',\n    'MSPointerDown': 'pointer',\n    'MSPointerMove': 'pointer',\n    'pointerdown': 'pointer',\n    'pointermove': 'pointer',\n    'touchstart': 'touch'\n  };\n\n  // add correct mouse wheel event mapping to `inputMap`\n  inputMap[detectWheel()] = 'mouse';\n\n  // array of all used input types\n  var inputTypes = [];\n\n  // mapping of key codes to a common name\n  var keyMap = {\n    9: 'tab',\n    13: 'enter',\n    16: 'shift',\n    27: 'esc',\n    32: 'space',\n    37: 'left',\n    38: 'up',\n    39: 'right',\n    40: 'down'\n  };\n\n  // map of IE 10 pointer events\n  var pointerMap = {\n    2: 'touch',\n    3: 'touch', // treat pen like touch\n    4: 'mouse'\n  };\n\n  // touch buffer timer\n  var timer;\n\n\n  /*\n    ---------------\n    functions\n    ---------------\n  */\n\n  // allows events that are also triggered to be filtered out for `touchstart`\n  function eventBuffer() {\n    clearTimer();\n    setInput(event);\n\n    buffer = true;\n    timer = window.setTimeout(function() {\n      buffer = false;\n    }, 650);\n  }\n\n  function bufferedEvent(event) {\n    if (!buffer) setInput(event);\n  }\n\n  function unBufferedEvent(event) {\n    clearTimer();\n    setInput(event);\n  }\n\n  function clearTimer() {\n    window.clearTimeout(timer);\n  }\n\n  function setInput(event) {\n    var eventKey = key(event);\n    var value = inputMap[event.type];\n    if (value === 'pointer') value = pointerType(event);\n\n    // don't do anything if the value matches the input type already set\n    if (currentInput !== value) {\n      var eventTarget = target(event);\n      var eventTargetNode = eventTarget.nodeName.toLowerCase();\n      var eventTargetType = (eventTargetNode === 'input') ? eventTarget.getAttribute('type') : null;\n\n      if (\n        (// only if the user flag to allow typing in form fields isn't set\n        !body.hasAttribute('data-whatinput-formtyping') &&\n\n        // only if currentInput has a value\n        currentInput &&\n\n        // only if the input is `keyboard`\n        value === 'keyboard' &&\n\n        // not if the key is `TAB`\n        keyMap[eventKey] !== 'tab' &&\n\n        // only if the target is a form input that accepts text\n        (\n           eventTargetNode === 'textarea' ||\n           eventTargetNode === 'select' ||\n           (eventTargetNode === 'input' && nonTypingInputs.indexOf(eventTargetType) < 0)\n        )) || (\n          // ignore modifier keys\n          ignoreMap.indexOf(eventKey) > -1\n        )\n      ) {\n        // ignore keyboard typing\n      } else {\n        switchInput(value);\n      }\n    }\n\n    if (value === 'keyboard') logKeys(eventKey);\n  }\n\n  function switchInput(string) {\n    currentInput = string;\n    body.setAttribute('data-whatinput', currentInput);\n\n    if (inputTypes.indexOf(currentInput) === -1) inputTypes.push(currentInput);\n  }\n\n  function key(event) {\n    return (event.keyCode) ? event.keyCode : event.which;\n  }\n\n  function target(event) {\n    return event.target || event.srcElement;\n  }\n\n  function pointerType(event) {\n    if (typeof event.pointerType === 'number') {\n      return pointerMap[event.pointerType];\n    } else {\n      return (event.pointerType === 'pen') ? 'touch' : event.pointerType; // treat pen like touch\n    }\n  }\n\n  // keyboard logging\n  function logKeys(eventKey) {\n    if (activeKeys.indexOf(keyMap[eventKey]) === -1 && keyMap[eventKey]) activeKeys.push(keyMap[eventKey]);\n  }\n\n  function unLogKeys(event) {\n    var eventKey = key(event);\n    var arrayPos = activeKeys.indexOf(keyMap[eventKey]);\n\n    if (arrayPos !== -1) activeKeys.splice(arrayPos, 1);\n  }\n\n  function bindEvents() {\n    body = document.body;\n\n    // pointer events (mouse, pen, touch)\n    if (window.PointerEvent) {\n      body.addEventListener('pointerdown', bufferedEvent);\n      body.addEventListener('pointermove', bufferedEvent);\n    } else if (window.MSPointerEvent) {\n      body.addEventListener('MSPointerDown', bufferedEvent);\n      body.addEventListener('MSPointerMove', bufferedEvent);\n    } else {\n\n      // mouse events\n      body.addEventListener('mousedown', bufferedEvent);\n      body.addEventListener('mousemove', bufferedEvent);\n\n      // touch events\n      if ('ontouchstart' in window) {\n        body.addEventListener('touchstart', eventBuffer);\n      }\n    }\n\n    // mouse wheel\n    body.addEventListener(mouseWheel, bufferedEvent);\n\n    // keyboard events\n    body.addEventListener('keydown', unBufferedEvent);\n    body.addEventListener('keyup', unBufferedEvent);\n    document.addEventListener('keyup', unLogKeys);\n  }\n\n\n  /*\n    ---------------\n    utilities\n    ---------------\n  */\n\n  // detect version of mouse wheel event to use\n  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n  function detectWheel() {\n    return mouseWheel = 'onwheel' in document.createElement('div') ?\n      'wheel' : // Modern browsers support \"wheel\"\n\n      document.onmousewheel !== undefined ?\n        'mousewheel' : // Webkit and IE support at least \"mousewheel\"\n        'DOMMouseScroll'; // let's assume that remaining browsers are older Firefox\n  }\n\n\n  /*\n    ---------------\n    init\n\n    don't start script unless browser cuts the mustard,\n    also passes if polyfills are used\n    ---------------\n  */\n\n  if (\n    'addEventListener' in window &&\n    Array.prototype.indexOf\n  ) {\n\n    // if the dom is already ready already (script was placed at bottom of <body>)\n    if (document.body) {\n      bindEvents();\n\n    // otherwise wait for the dom to load (script was placed in the <head>)\n    } else {\n      document.addEventListener('DOMContentLoaded', bindEvents);\n    }\n  }\n\n\n  /*\n    ---------------\n    api\n    ---------------\n  */\n\n  return {\n\n    // returns string: the current input type\n    ask: function() { return currentInput; },\n\n    // returns array: currently pressed keys\n    keys: function() { return activeKeys; },\n\n    // returns array: all the detected input types\n    types: function() { return inputTypes; },\n\n    // accepts string: manually set the input type\n    set: switchInput\n  };\n\n}());\n"]}